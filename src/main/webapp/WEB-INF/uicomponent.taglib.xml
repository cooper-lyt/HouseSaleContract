<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE facelet-taglib PUBLIC "-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN" "http://java.sun.com/dtd/facelet-taglib_1_0.dtd">
<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
                version="2.0">
    <namespace>http://www.dgsoft.com/jsf/html</namespace>
    <tag>
        <description>
            outPut a table
        </description>
        <tag-name>entryGrid</tag-name>
        <component>
            <component-type>com.dgsoft.faces.EntryPanelGrid</component-type>
            <renderer-type>com.dgsoft.faces.render.EntryPanelGrid</renderer-type>
        </component>
        <attribute>
            <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                value group (th) column Width
            </description>
            <name>groupWidth</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                value (td) column Width
            </description>
            <name>valueWidth</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                key (th) column Width
            </description>
            <name>keyWidth</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
            <name>autoLastWidth</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>entryGridBlock</tag-name>
        <component>
            <component-type>com.dgsoft.faces.EntryGridBlock</component-type>
            <renderer-type>com.dgsoft.faces.render.EntryGridBlock</renderer-type>
        </component>
        <attribute>
            <description>Flag indicating whether or not this component should be rendered (during Render Response Phase), or processed on any subsequent form submit. The default value for this property is true.</description>
            <display-name>Rendered Flag</display-name>
            <icon/>
            <name>rendered</name>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                group name out put 'th' rowspan
            </description>
            <name>group</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>

        <attribute>
            <description>
                column count
            </description>
            <name>columns</name>
            <required>true</required>
            <type>int</type>
        </attribute>

        <attribute>
            <description>
                expandId
            </description>
            <name>expandId</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>



    </tag>
    <tag>
        <tag-name>entryGridColumn</tag-name>
        <component>
            <component-type>com.dgsoft.faces.EntryColumn</component-type>
            <renderer-type>com.dgsoft.faces.render.EntryColumn</renderer-type>
        </component>
        <attribute>
            <description>
                column colspan
            </description>
            <name>colspan</name>
            <required>true</required>
            <type>int</type>
        </attribute>
        <attribute>
            <description>
                expand Target ID
            </description>
            <name>expandTarget</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
    </tag>

    <tag>
        <tag-name>switch</tag-name>
        <component>
            <component-type>com.dgsoft.faces.Switch</component-type>
            <renderer-type>com.dgsoft.faces.render.SWitch</renderer-type>
        </component>
        <attribute>
            <description>
                Converter instance registered with this component.
            </description>
            <name>converter</name>
            <required>false</required>
            <type>javax.faces.convert.Converter</type>
        </attribute>
        <attribute>
            <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the converter message, replacing any message
                that comes from the converter.
            </description>
            <name>converterMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating that this component's value must be
                converted and validated immediately (that is, during
                Apply Request Values phase), rather than waiting
                until Process Validations phase.
            </description>
            <name>immediate</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating that the user is required to provide a submitted
                value for this input component.
            </description>
            <name>required</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validation message for the "required"
                facility, if the "required" facility is used.
            </description>
            <name>requiredMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                MethodExpression representing a validator method that will be
                called
                during Process Validations to perform correctness checks on the
                value of this component. The expression must evaluate to a
                public
                method that takes FacesContext, UIComponent, and Object
                parameters,
                with a return type of void.
            </description>
            <name>validator</name>
            <required>false</required>
        </attribute>
        <attribute>
            <description>
                A ValueExpression enabled attribute that, if present, will be
                used as the text of the validator message, replacing any
                message that comes from the validator.
            </description>
            <name>validatorMessage</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                The current value of this component.
            </description>
            <name>value</name>
            <required>false</required>
            <type>java.lang.Boolean</type>
        </attribute>
        <attribute>
            <description>
                &lt;p&gt;
                MethodExpression representing a value change listener method
                that will be notified when a new value has been set for this
                input component. The expression must evaluate to a public
                method that takes a &lt;code&gt;ValueChangeEvent&lt;/code&gt;
                parameter,
                with a return type of void, &lt;span class="changed_added_2_0"&gt;or
                to a public method that takes no arguments with a return type
                of void. In the latter case, the method has no way of easily
                knowing what the new value is, but this can be useful in cases
                where a notification is needed that "this value
                changed".&lt;/span&gt;
                &lt;/p&gt;
            </description>
            <name>valueChangeListener</name>
            <required>false</required>
        </attribute>
        <attribute>
            <description>
                Access key that, when pressed, transfers focus
                to this element.
            </description>
            <name>accesskey</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating that this element must never receive focus or
                be included in a subsequent submit. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as disabled="disabled".
            </description>
            <name>disabled</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                A localized user presentable name for this component.
            </description>
            <name>label</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when this element loses focus.
            </description>
            <name>onblur</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when this element loses focus
                and its value has been modified since gaining focus.
            </description>
            <name>onchange</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
            <name>onclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
            <name>ondblclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when this element receives focus.
            </description>
            <name>onfocus</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
            <name>onkeydown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
            <name>onkeypress</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                released over this element.
            </description>
            <name>onkeyup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
            <name>onmousedown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
            <name>onmousemove</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
            <name>onmouseout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
            <name>onmouseover</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
            <name>onmouseup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when text within this
                element is selected by the user.
            </description>
            <name>onselect</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating that this component will prohibit changes by
                the user. The element may receive focus unless it has also
                been disabled. A value of false causes
                no attribute to be rendered, while a value of true causes the
                attribute to be rendered as readonly="readonly".
            </description>
            <name>readonly</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Position of this element in the tabbing order
                for the current document. This value must be
                an integer between 0 and 32767.
            </description>
            <name>tabindex</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
            <name>title</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>
</facelet-taglib>